Index: ascify/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pyfiglet\nfrom pyfiglet import FigletFont\nfrom prettytable import PrettyTable\nfrom colorama import Fore, Style, init\nimport argparse\nimport sys\n\n# Initialize colorama\ninit(autoreset=True)\n\n# Define available foreground colors with their names\nFOREGROUND_COLORS = {\n    \"1\": (Fore.RED, \"Red\"),\n    \"2\": (Fore.GREEN, \"Green\"),\n    \"3\": (Fore.YELLOW, \"Yellow\"),\n    \"4\": (Fore.BLUE, \"Blue\"),\n    \"5\": (Fore.MAGENTA, \"Magenta\"),\n    \"6\": (Fore.CYAN, \"Cyan\"),\n    \"7\": (Fore.WHITE, \"White\")\n}\n\n# Application version\nAPP_VERSION = \"1.0.0\"\n\n\ndef main():\n    try:\n        banner_ascii = r\"\"\"\n         _______  _______  _______ _________ _______          \n        (  ___  )(  ____ \\(  ____ \\\\__   __/(  ____ \\|\\     /|\n        | (   ) || (    \\/| (    \\/   ) (   | (    \\/( \\   / )\n        | (___) || (_____ | |         | |   | (__     \\ (_) / \n        |  ___  |(_____  )| |         | |   |  __)     \\   /  \n        | (   ) |      ) || |         | |   | (         ) (   \n        | )   ( |/\\____) || (____/\\___) (___| )         | |   \n        |/     \\|\\_______)(_______/\\_______/|/          \\_/   \n\n         Advanced ASCII Banner Maker           \n              Author: fkr00t                     \n              GitHub: github.com/fkr00t              \n        \"\"\"\n        print(banner_ascii)\n        text = input(\"Enter your text: \")\n\n        # Get all fonts\n        fonts = FigletFont.getFonts()\n        font_count = len(fonts)\n\n        # Set the number of columns in the table (e.g., 8)\n        columns = 8\n        rows = (font_count + columns - 1) // columns  # Calculate required rows\n\n        # Arrange fonts in vertical order\n        arranged_fonts = [[\"\"] * columns for _ in range(rows)]\n        for idx, font in enumerate(fonts):\n            row = idx % rows\n            col = idx // rows\n            arranged_fonts[row][col] = f\"{idx + 1}. {font}\"\n\n        # Create the table\n        table = PrettyTable()\n        table.header = False  # Remove table header\n        table.align = \"l\"  # Left align text\n        column_width = 25  # Fixed column width\n\n        # Add all rows to the table\n        for row in arranged_fonts:\n            table.add_row([entry.ljust(column_width) for entry in row])\n\n        # Display the table\n        print(\"\\nAvailable Fonts (select by number):\")\n        print(table)\n\n        # Ask the user to select a font by number\n        while True:\n            font_choice = input(\"\\nSelect a font (enter number): \")\n            if font_choice.isdigit() and 1 <= int(font_choice) <= font_count:\n                font = fonts[int(font_choice) - 1]  # Use the selected font number\n                break\n            else:\n                print(\"Invalid input! Please enter a valid font number.\")\n\n        # Ask the user to select a foreground color\n        print(\"\\nAvailable Foreground Colors:\")\n        for key, (color, name) in FOREGROUND_COLORS.items():\n            print(f\"{key}. {color}{name}{Style.RESET_ALL}\")\n\n        while True:\n            fg_choice = input(\"\\nSelect a foreground color (enter number): \")\n            if fg_choice in FOREGROUND_COLORS:\n                foreground, color_name = FOREGROUND_COLORS[fg_choice]\n                print(f\"\\nYou selected: {foreground}{color_name}{Style.RESET_ALL}\")\n                break\n            else:\n                print(\"Invalid input! Please select a valid color.\")\n\n        # Generate the ASCII banner\n        banner = pyfiglet.figlet_format(text, font=font)\n        print(\"\\nGenerated ASCII Banner:\")\n        print(foreground + banner)\n\n        # Ask if the user wants to save the result to a file\n        while True:\n            save_choice = input(\"Do you want to save the result to a file? (Y/N): \").strip().lower()\n            if save_choice in [\"y\", \"n\"]:  # Accept only 'y' or 'n'\n                break\n            else:\n                print(\"Invalid input! Please enter 'Y' or 'N'.\")\n\n        if save_choice == \"y\":\n            file_name = input(\"Enter the file name (e.g., output.txt, press Enter for default): \").strip()\n            if not file_name:  # If the user presses Enter without input\n                file_name = \"output.txt\"  # Default file name\n            try:\n                with open(file_name, \"w\") as file:\n                    file.write(banner)  # Save only the plain text banner\n                print(f\"The result has been saved to: {file_name}\")\n            except Exception as e:\n                print(f\"An error occurred while saving the file: {e}\")\n        else:\n            print(\"The result was not saved.\")\n\n    except KeyboardInterrupt:\n        print(\"\\n\\nBye!!\")  # Message when Ctrl+C is pressed\n        sys.exit(0)  # Exit the program successfully\n\n\nif __name__ == \"__main__\":\n    # Parse command-line arguments\n    parser = argparse.ArgumentParser(description=\"Advanced ASCII Banner Maker\")\n    parser.add_argument(\"-v\", \"--version\", action=\"store_true\", help=\"Show program's version and exit\")\n\n    args = parser.parse_args()\n\n    # Handle version argument\n    if args.version:\n        print(f\"Advanced ASCII Banner Maker {APP_VERSION}\")\n        sys.exit(0)\n\n    # Run the main program only if no arguments are provided\n    main()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ascify/main.py b/ascify/main.py
--- a/ascify/main.py	(revision 1ba12de7be0410ea64cb8038e29cd8b1a29f851e)
+++ b/ascify/main.py	(date 1736916726553)
@@ -1,23 +1,9 @@
 import pyfiglet
 from pyfiglet import FigletFont
 from prettytable import PrettyTable
-from colorama import Fore, Style, init
 import argparse
 import sys
-
-# Initialize colorama
-init(autoreset=True)
-
-# Define available foreground colors with their names
-FOREGROUND_COLORS = {
-    "1": (Fore.RED, "Red"),
-    "2": (Fore.GREEN, "Green"),
-    "3": (Fore.YELLOW, "Yellow"),
-    "4": (Fore.BLUE, "Blue"),
-    "5": (Fore.MAGENTA, "Magenta"),
-    "6": (Fore.CYAN, "Cyan"),
-    "7": (Fore.WHITE, "White")
-}
+import pyperclip  # Untuk copy to clipboard
 
 # Application version
 APP_VERSION = "1.0.0"
@@ -45,6 +31,7 @@
         # Get all fonts
         fonts = FigletFont.getFonts()
         font_count = len(fonts)
+        print(f"\nTotal fonts available: {font_count}")  # Print total number of fonts
 
         # Set the number of columns in the table (e.g., 8)
         columns = 8
@@ -68,36 +55,47 @@
             table.add_row([entry.ljust(column_width) for entry in row])
 
         # Display the table
-        print("\nAvailable Fonts (select by number):")
+        print("\nAvailable Fonts (select by number or name):")
         print(table)
 
-        # Ask the user to select a font by number
+        # Loop for font selection and preview
         while True:
-            font_choice = input("\nSelect a font (enter number): ")
-            if font_choice.isdigit() and 1 <= int(font_choice) <= font_count:
-                font = fonts[int(font_choice) - 1]  # Use the selected font number
-                break
+            font_choice = input("\nSelect a font (enter number or name): ").strip()
+            selected_font = None
+
+            # Check if input is a number
+            if font_choice.isdigit():
+                font_number = int(font_choice)
+                if 1 <= font_number <= font_count:
+                    selected_font = fonts[font_number - 1]  # Use the selected font number
+                else:
+                    print("Invalid number! Please enter a valid font number.")
+                    continue
             else:
-                print("Invalid input! Please enter a valid font number.")
+                # Check if input is a valid font name
+                if font_choice in fonts:
+                    selected_font = font_choice
+                else:
+                    print("Invalid font name! Please enter a valid font name.")
+                    continue
 
-        # Ask the user to select a foreground color
-        print("\nAvailable Foreground Colors:")
-        for key, (color, name) in FOREGROUND_COLORS.items():
-            print(f"{key}. {color}{name}{Style.RESET_ALL}")
+            # Generate preview with the selected font
+            banner = pyfiglet.figlet_format(text, font=selected_font)
+            print("\nPreview of the selected font:")
+            print(banner)
 
-        while True:
-            fg_choice = input("\nSelect a foreground color (enter number): ")
-            if fg_choice in FOREGROUND_COLORS:
-                foreground, color_name = FOREGROUND_COLORS[fg_choice]
-                print(f"\nYou selected: {foreground}{color_name}{Style.RESET_ALL}")
-                break
+            # Ask if the user wants to continue with this font or choose another
+            while True:
+                continue_choice = input("Do you want to continue with this font? (Y/N): ").strip().lower()
+                if continue_choice in ["y", "n"]:
+                    break
+                else:
+                    print("Invalid input! Please enter 'Y' or 'N'.")
+
+            if continue_choice == "y":
+                break  # Exit the font selection loop and proceed to saving
             else:
-                print("Invalid input! Please select a valid color.")
-
-        # Generate the ASCII banner
-        banner = pyfiglet.figlet_format(text, font=font)
-        print("\nGenerated ASCII Banner:")
-        print(foreground + banner)
+                continue  # Go back to font selection
 
         # Ask if the user wants to save the result to a file
         while True:
@@ -117,8 +115,23 @@
                 print(f"The result has been saved to: {file_name}")
             except Exception as e:
                 print(f"An error occurred while saving the file: {e}")
+
+        # Ask if the user wants to copy the result to clipboard
+        while True:
+            copy_choice = input("Do you want to copy the result to clipboard? (Y/N): ").strip().lower()
+            if copy_choice in ["y", "n"]:  # Accept only 'y' or 'n'
+                break
+            else:
+                print("Invalid input! Please enter 'Y' or 'N'.")
+
+        if copy_choice == "y":
+            try:
+                pyperclip.copy(banner)  # Copy the banner to clipboard
+                print("The result has been copied to clipboard!")
+            except Exception as e:
+                print(f"An error occurred while copying to clipboard: {e}")
         else:
-            print("The result was not saved.")
+            print("The result was not copied to clipboard.")
 
     except KeyboardInterrupt:
         print("\n\nBye!!")  # Message when Ctrl+C is pressed
@@ -138,4 +151,4 @@
         sys.exit(0)
 
     # Run the main program only if no arguments are provided
-    main()
+    main()
\ No newline at end of file
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n# **Advanced ASCII Banner Maker**\n\n![Banner Maker](https://img.shields.io/badge/ASCII-BannerMaker-blue?style=flat-square)\n![Python Version](https://img.shields.io/badge/Python-3.x-green?style=flat-square)\n![License](https://img.shields.io/github/license/fkr00t/ascify?style=flat-square)\n\n## **Overview**\nThe **Advanced ASCII Banner Maker** is a Python-based tool designed to generate customizable ASCII art banners. With a library of hundreds of fonts, an easy-to-use interface, and the ability to save results to files, it’s the perfect solution for creating stylish ASCII banners for your projects.\n\n---\n\n## **Features**\n- \uD83D\uDE80 **Hundreds of Fonts**: Choose from a comprehensive library of fonts to customize your banner.\n- \uD83D\uDCA1 **Interactive Interface**: Font selection displayed in a neatly organized table.\n- \uD83D\uDCDD **Save to File**: Option to save your ASCII banner to a file with your chosen filename.\n\n---\n\n## **Requirements**\n- Python 3.x\n- Dependencies:\n  - [`pyfiglet`](https://pypi.org/project/pyfiglet/)\n  - [`prettytable`](https://pypi.org/project/prettytable/)\n  - [`colorama`](https://pypi.org/project/colorama//)\n\n## **How to Use**\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/fkr00t/ascify.git\n   ```\n2. Navigate to the project directory:\n   ```bash\n   cd ascify\n   ```\n3. Run the application:\n   ```bash\n   pip install .\n   ```\n4. Follow the on-screen instructions:\n   - Enter the text you want to convert into an ASCII banner.\n   - Select a font from the table by entering its corresponding number.\n   - View the generated banner in your terminal.\n   - Optionally save the banner to a file.\n\n   \n## **How to Run**\n```bash\n   ascify \n   ```\n---\n\n\n## **Example**\n### **Input**\n- **Text**: `Hello`\n- **Font**: `slant`\n\n### **Generated ASCII Banner**\n```\n  _   _      _ _\n | | | |    | | |\n | |_| | ___| | | ___\n |  _  |/ _ \\ | |/ _ \\\n | | | |  __/ | | (_) |\n \\_| |_/\\___|_|_|\\___/\n```\n\n### **Saving to File**\nIf you choose to save:\n```bash\nDo you want to save the result to a file? (yes/no): yes\nEnter the file name (e.g., output.txt): hello_banner.txt\n```\nThe file `hello_banner.txt` will now contain your ASCII banner.\n\n---\n\n## **Screenshots**\n### **Font Selection Table**\n### ***Images 1***\n![Images 1](https://github.com/user-attachments/assets/88b64c1c-660e-4845-a92a-d2a23a74fac8)\n\n### ***Images 2***\n![Images 2](https://github.com/user-attachments/assets/3d9b8e0a-7ec5-4f63-8874-7fa812095b8e)\n\n---\n## **License**\nThis project is licensed under the [MIT License](LICENSE). Feel free to use and modify it as per your needs.\n\n---\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 1ba12de7be0410ea64cb8038e29cd8b1a29f851e)
+++ b/README.md	(date 1736917777421)
@@ -23,6 +23,7 @@
   - [`pyfiglet`](https://pypi.org/project/pyfiglet/)
   - [`prettytable`](https://pypi.org/project/prettytable/)
   - [`colorama`](https://pypi.org/project/colorama//)
+  - [`pyperclip`](https://pypi.org/project/colorama//)
 
 ## **How to Use**
 1. Clone the repository:
@@ -48,44 +49,3 @@
 ```bash
    ascify 
    ```
----
-
-
-## **Example**
-### **Input**
-- **Text**: `Hello`
-- **Font**: `slant`
-
-### **Generated ASCII Banner**
-```
-  _   _      _ _
- | | | |    | | |
- | |_| | ___| | | ___
- |  _  |/ _ \ | |/ _ \
- | | | |  __/ | | (_) |
- \_| |_/\___|_|_|\___/
-```
-
-### **Saving to File**
-If you choose to save:
-```bash
-Do you want to save the result to a file? (yes/no): yes
-Enter the file name (e.g., output.txt): hello_banner.txt
-```
-The file `hello_banner.txt` will now contain your ASCII banner.
-
----
-
-## **Screenshots**
-### **Font Selection Table**
-### ***Images 1***
-![Images 1](https://github.com/user-attachments/assets/88b64c1c-660e-4845-a92a-d2a23a74fac8)
-
-### ***Images 2***
-![Images 2](https://github.com/user-attachments/assets/3d9b8e0a-7ec5-4f63-8874-7fa812095b8e)
-
----
-## **License**
-This project is licensed under the [MIT License](LICENSE). Feel free to use and modify it as per your needs.
-
----
Index: .gitignore
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1736917812808)
+++ b/.gitignore	(date 1736917812808)
@@ -0,0 +1,1 @@
+./.idea
\ No newline at end of file
